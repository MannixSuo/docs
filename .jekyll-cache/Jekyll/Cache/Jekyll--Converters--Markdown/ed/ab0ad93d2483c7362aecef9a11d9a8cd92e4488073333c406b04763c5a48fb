I"­=<h2 id="rule">Rule</h2>

<p>makefile consists of <code class="language-plaintext highlighter-rouge">rules</code> with the following shape:</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">target ''' </span><span class="o">:</span> <span class="nf">prerequisistes</span>
           <span class="err">recipe</span>
</code></pre></div></div>

<p>A <code class="language-plaintext highlighter-rouge">target</code> is usually the name of a file that is generated by a program;A target can also be the name of an action to carry out, sucn as <code class="language-plaintext highlighter-rouge">clean</code>.</p>

<p>A <code class="language-plaintext highlighter-rouge">prerequisite</code> is a file that is used as input to create the target. A target ifen depends on several files.</p>

<p>A <code class="language-plaintext highlighter-rouge">recipe</code> is an action that <code class="language-plaintext highlighter-rouge">make</code> carries out.A recipe may have more than one command,either on the same line or each on its own line. <strong>Plaese Note:</strong> you need to put a tab character at the begining of every recipe line! If you prefer to prefix your recipes with a character other than tab , you can set the <code class="language-plaintext highlighter-rouge">.RECIPEPREFIX</code> variable to an alternate character.</p>

<p>Usually a recipe is in an rule with prerequisites and serves to create a target file if any of the prerequisites change. However ,the rule that specifies a recipe for the target need not have prerequistes. For example,the rule containing the delete command associated with the target <code class="language-plaintext highlighter-rouge">clean</code> does not have prerequisites.</p>

<h2 id="simple-makefile">Simple Makefile</h2>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">edit </span><span class="o">:</span> <span class="nf">main.o kbd.o command.o display.o </span>\
<span class="nf">       insert.o search.o files.o utils.o</span>
        <span class="err">cc</span> <span class="err">-o</span> <span class="err">edit</span> <span class="err">main.o</span> <span class="err">kbd.o</span> <span class="err">command.o</span> <span class="err">display.o</span> <span class="err">\</span>
                   <span class="err">insert.o</span> <span class="err">search.o</span> <span class="err">files.o</span> <span class="err">utils.o</span>

<span class="nl">main.o </span><span class="o">:</span> <span class="nf">main.c defs.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">main.c</span>
<span class="nl">kbd.o </span><span class="o">:</span> <span class="nf">kbd.c defs.h command.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">kbd.c</span>
<span class="nl">command.o </span><span class="o">:</span> <span class="nf">command.c defs.h command.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">command.c</span>
<span class="nl">display.o </span><span class="o">:</span> <span class="nf">display.c defs.h buffer.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">display.c</span>
<span class="nl">insert.o </span><span class="o">:</span> <span class="nf">insert.c defs.h buffer.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">insert.c</span>
<span class="nl">search.o </span><span class="o">:</span> <span class="nf">search.c defs.h buffer.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">search.c</span>
<span class="nl">files.o </span><span class="o">:</span> <span class="nf">files.c defs.h buffer.h command.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">files.c</span>
<span class="nl">utils.o </span><span class="o">:</span> <span class="nf">utils.c defs.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">utils.c</span>
<span class="nl">clean </span><span class="o">:</span>
        <span class="err">rm</span> <span class="err">edit</span> <span class="err">main.o</span> <span class="err">kbd.o</span> <span class="err">command.o</span> <span class="err">display.o</span> <span class="err">\</span>
           <span class="err">insert.o</span> <span class="err">search.o</span> <span class="err">files.o</span> <span class="err">utils.o</span>
</code></pre></div></div>

<p>The target <code class="language-plaintext highlighter-rouge">clean</code> is not a file ,but merely the name if an action.Target that do not refer to files but are just action are called <code class="language-plaintext highlighter-rouge">phony target</code>.</p>

<h2 id="how-make-process-a-makefile">How make Process a Makefile</h2>

<p>By default ,<code class="language-plaintext highlighter-rouge">make</code> starts with the first target(not targets whose names start with <code class="language-plaintext highlighter-rouge">.</code>).This is called the <code class="language-plaintext highlighter-rouge">default</code> goal.You can override this behavior using the command line or with the <code class="language-plaintext highlighter-rouge">.DEFAULT_GOAL</code> special variable.</p>

<p>In the previous example ,the default goal is to update the executable program <code class="language-plaintext highlighter-rouge">edit</code>;therefore we put that rule first.</p>

<h2 id="variable">Variable</h2>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">objects</span> <span class="o">=</span> main.o kbd.o command.o display.o <span class="se">\</span>
          insert.o search.o files.o utils.o
</code></pre></div></div>
<p>Then,each place we want to put a list of the object file names,we can substitude the variableâ€™s value by writing <code class="language-plaintext highlighter-rouge">$(objects)</code></p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">objects</span> <span class="o">=</span> main.o kbd.o command.o display.o <span class="se">\</span>
          insert.o search.o files.o utils.o

<span class="nl">edit </span><span class="o">:</span> <span class="nf">$(objects)</span>
        <span class="err">cc</span> <span class="err">-o</span> <span class="err">edit</span> <span class="err">$(objects)</span>
<span class="nl">main.o </span><span class="o">:</span> <span class="nf">main.c defs.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">main.c</span>
<span class="nl">kbd.o </span><span class="o">:</span> <span class="nf">kbd.c defs.h command.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">kbd.c</span>
<span class="nl">command.o </span><span class="o">:</span> <span class="nf">command.c defs.h command.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">command.c</span>
<span class="nl">display.o </span><span class="o">:</span> <span class="nf">display.c defs.h buffer.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">display.c</span>
<span class="nl">insert.o </span><span class="o">:</span> <span class="nf">insert.c defs.h buffer.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">insert.c</span>
<span class="nl">search.o </span><span class="o">:</span> <span class="nf">search.c defs.h buffer.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">search.c</span>
<span class="nl">files.o </span><span class="o">:</span> <span class="nf">files.c defs.h buffer.h command.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">files.c</span>
<span class="nl">utils.o </span><span class="o">:</span> <span class="nf">utils.c defs.h</span>
        <span class="err">cc</span> <span class="err">-c</span> <span class="err">utils.c</span>
<span class="nl">clean </span><span class="o">:</span>
        <span class="err">rm</span> <span class="err">edit</span> <span class="err">$(objects)</span>
</code></pre></div></div>

<h2 id="letting-make-deduce-the-recipes">Letting Make Deduce the Recipes</h2>

<p>It is necessary to spell out the recipes for compiling the individual C source files, beacuse make can figure them out: It has an <code class="language-plaintext highlighter-rouge">implicit rule</code> for updating a <code class="language-plaintext highlighter-rouge">.o</code> file from a correspondingly named <code class="language-plaintext highlighter-rouge">.c</code> file using a <code class="language-plaintext highlighter-rouge">cc -c</code> command. For example, it will use the recipe <code class="language-plaintext highlighter-rouge">cc -c main.c -o main.o</code> to compile <code class="language-plaintext highlighter-rouge">main.c</code> into <code class="language-plaintext highlighter-rouge">main.o</code></p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">objects</span> <span class="o">=</span> main.o kbd.o command.o display.o <span class="se">\</span>
          insert.o search.o files.o utils.o

<span class="nl">edit </span><span class="o">:</span> <span class="nf">$(objects)</span>
        <span class="err">cc</span> <span class="err">-o</span> <span class="err">edit</span> <span class="err">$(objects)</span>

<span class="nl">main.o </span><span class="o">:</span> <span class="nf">defs.h</span>
<span class="nl">kbd.o </span><span class="o">:</span> <span class="nf">defs.h command.h</span>
<span class="nl">command.o </span><span class="o">:</span> <span class="nf">defs.h command.h</span>
<span class="nl">display.o </span><span class="o">:</span> <span class="nf">defs.h buffer.h</span>
<span class="nl">insert.o </span><span class="o">:</span> <span class="nf">defs.h buffer.h</span>
<span class="nl">search.o </span><span class="o">:</span> <span class="nf">defs.h buffer.h</span>
<span class="nl">files.o </span><span class="o">:</span> <span class="nf">defs.h buffer.h command.h</span>
<span class="nl">utils.o </span><span class="o">:</span> <span class="nf">defs.h</span>

<span class="nl">.PHONY </span><span class="o">:</span> <span class="nf">clean</span>
<span class="nl">clean </span><span class="o">:</span>
        <span class="err">rm</span> <span class="err">edit</span> <span class="err">$(objects)</span>
</code></pre></div></div>

<h2 id="another-style-of-makefile">Another Style of Makefile</h2>

<p>When the objects of a makefile are created only by implicit rules,an alternative style of makefiles is possible.In this style of makefile, you group entries by theri prerequisites instead of by their targets, Here is what one looks like.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">objects</span> <span class="o">=</span> main.o kbd.o command.o display.o <span class="se">\</span>
          insert.o search.o files.o utils.o

<span class="nl">edit </span><span class="o">:</span> <span class="nf">$(objects)</span>
        <span class="err">cc</span> <span class="err">-o</span> <span class="err">edit</span> <span class="err">$(objects)</span>

<span class="nl">$(objects) </span><span class="o">:</span> <span class="nf">defs.h</span>
<span class="nl">kbd.o command.o files.o </span><span class="o">:</span> <span class="nf">command.h</span>
<span class="nl">display.o insert.o search.o files.o </span><span class="o">:</span> <span class="nf">buffer.h</span>
</code></pre></div></div>

<p>Here <code class="language-plaintext highlighter-rouge">defs.h</code> is given as a prerequisite of all the object files;<code class="language-plaintext highlighter-rouge">command.h</code> and <code class="language-plaintext highlighter-rouge">buffer.h</code> are prerequisites of the specific object files listed for them.</p>

<h2 id="rules-for-cleaning-the-directory">Rules for Cleaning the Directory</h2>

<p>Compiling a program is not the only thing you might want to write rules for. Makefiles commonly tell how to do a few other things besides compiling a program: for example, how to delete all the object files and executables so that the directory is <code class="language-plaintext highlighter-rouge">clean</code>.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">clean</span><span class="o">:</span>
        <span class="err">rm</span> <span class="err">edit</span> <span class="err">$(objects)</span>
</code></pre></div></div>

<p>In practice we might want to write the rule in a somewhat more complicated manner to handle unanticipated situations.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">.PHONY </span><span class="o">:</span> <span class="nf">clean</span>
<span class="nl">clean </span><span class="o">:</span>
        <span class="err">-rm</span> <span class="err">edit</span> <span class="err">$(objects)</span>
</code></pre></div></div>

<p>This prevents <code class="language-plaintext highlighter-rouge">make</code> from getting confused by an actual file called <code class="language-plaintext highlighter-rouge">clean</code> and causes it to continue in spite of errors from <code class="language-plaintext highlighter-rouge">rm</code>.</p>

<h2 id="what-makefiles-contain">What Makefiles Contain</h2>

<p>Makefiles contain five kinds of things :<code class="language-plaintext highlighter-rouge">explicit rules</code>,<code class="language-plaintext highlighter-rouge">implicit rules</code>,<code class="language-plaintext highlighter-rouge">variable definitions</code>,<code class="language-plaintext highlighter-rouge">directives</code> and <code class="language-plaintext highlighter-rouge">comments</code></p>

<ul>
  <li>An <code class="language-plaintext highlighter-rouge">explicit rule</code> says when and how to remake one or more files,called the ruleâ€™s <code class="language-plaintext highlighter-rouge">targets</code>. It lists the other files that the targets depend on, called the prerequisites of the target, and may also give a recipe to use to create or update the targets.</li>
  <li>An <code class="language-plaintext highlighter-rouge">implicit rule</code> says when and how to remake a class of files based on their names.It describe how a target may depend on a file with a name similar to the target and gives a recipe to create or uodate such a target.</li>
  <li>A <code class="language-plaintext highlighter-rouge">variable definition</code> is a line that specifies a text string value for a variable that can be substituted into the text later.</li>
  <li>A <code class="language-plaintext highlighter-rouge">directive</code> is an instruction for <code class="language-plaintext highlighter-rouge">make</code> to do something special while reading the makefile. This include:
    <ul>
      <li>Reading another makefile</li>
      <li>Deciding whether to use or ignore a part of the makefile</li>
      <li>Defining a variable from a verbation string containing multiple lines</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">#</code> in a line of a makefile starts a <code class="language-plaintext highlighter-rouge">comment</code>.It and the rest of the line are ignored,except that a trailing backslash not escaped by another backslash will continue the comment across multiple lines.</li>
</ul>
:ET