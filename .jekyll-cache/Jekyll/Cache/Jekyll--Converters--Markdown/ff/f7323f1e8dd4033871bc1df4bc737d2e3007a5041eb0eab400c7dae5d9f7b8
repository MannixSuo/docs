I"~8<h2 id="需求分析">需求分析</h2>

<p>当用户使用的不是企业证书解决方案，或者由于某种原因不想通过 CA 购买证书，如用于测试等场景，则需要创建自签名证书。
可以通过 Linux 的 OpenSSL 命令行工具生成自签名证书，实现加密解密， 甚至还可以当做 CA 来用，创建以及吊销证书。</p>

<p>保管根证书，所有其他证书都由这个根证书来签发。用户/同事只需要把这个根证书添加到受信任的根证书，然后所有其他由此根证书签发的证书都会被自动信任（前提是证书设置正确）。</p>

<h2 id="根证书概念">根证书概念</h2>

<p>根证书是CA给自己颁发的证书,是信任链的起始点。安装根证书意味着对这个CA认证中心的信任。</p>

<p><a href="[https://baike.baidu.com/item/%E6%A0%B9%E8%AF%81%E4%B9%A6/9874620?fr=aladdin](https://baike.baidu.com/item/根证书/9874620?fr=aladdin)">百度百科上的解释</a></p>

<h2 id="csr概念">CSR概念</h2>

<p>Certificate Signing Request的英文缩写，即证书请求文件，也就是证书申请者在申请数字证书时由CSP(加密服务提供者)在生成私钥的同时也生成证书请求文件，证书申请者只要把CSR文件提交给证书颁发机构后，证书颁发机构使用其根证书私钥签名就生成了证书公钥文件，也就是颁发给用户的证书。</p>

<h2 id="证书生成流程">证书生成流程</h2>

<pre><code class="language-mermaid">sequenceDiagram
    participant 申请人
    participant 根证书管理员
    申请人 -&gt;&gt; 申请人 : 根据自己需要的证书属性，创建csr
    申请人 -&gt;&gt; 根证书管理员 : 将csr发给根证书管理员，请求他签发证书
    根证书管理员 -&gt;&gt; 根证书管理员 : 根证书管理员验证证书请求，并用根证书和根证书密钥以及csr来创建证书
    根证书管理员 -&gt;&gt; 申请人: 将生成的证书文件发送给申请人
</code></pre>

<h2 id="示例">示例</h2>

<h3 id="首先创建一个ca根证书根证书管理员来做">首先创建一个CA根证书（根证书管理员来做）：</h3>

<p>使用 OpenSSL 可以创建自己的 CA，给需要验证的用户或服务器颁发证书，在创建 CA 根证书之前，请做好如下准备工作：修改好 CA 的配置文件、序列号、索引等等。</p>

<ol>
  <li>
    <p>创建 CA 目录</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">mkdir</span> <span class="nt">-p</span> ~/ssl/demoCA/<span class="o">{</span>certs,newcerts,crl,private<span class="o">}</span>
 <span class="nb">cd</span> ~/ssl/demoCA
 <span class="nb">touch </span>index.txt
 <span class="nb">echo</span> <span class="s2">"01"</span> <span class="o">&gt;</span> serial
</code></pre></div>    </div>

    <p>具体每个目录存储什么信息，可以查看 <code class="language-plaintext highlighter-rouge">openssl</code> 的配置文件：<code class="language-plaintext highlighter-rouge">vi /etc/ssl/openssl.cnf</code>:</p>
  </li>
  <li>
    <p>修改 <code class="language-plaintext highlighter-rouge">openssl.cnf </code>文件</p>

    <p>不同版本虚拟机这个文件的位置不一样</p>

    <p>CentOS 7 在 <code class="language-plaintext highlighter-rouge">/etc/pki/tls/openssl.cnf</code>目录下</p>

    <p>建议拷贝 <code class="language-plaintext highlighter-rouge">openssl.cnf </code>文件到自定义文件夹下，这样可以自定义证书和证书申请中的一些属性和扩展，如秘钥扩展等：</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo cp</span> /etc/ssl/openssl.cnf ~/ssl/openssl.cnf
 vi ~/ssl/openssl.cnf
    
 修改CA_default下面的dir
 <span class="o">[</span> CA_default <span class="o">]</span>
 <span class="nb">dir</span>             <span class="o">=</span> /root/ssl/demoCA      <span class="c"># Where everything is kept</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>生成 CA 根证书及密钥</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl req <span class="nt">-new</span> <span class="nt">-x509</span> <span class="nt">-newkey</span> rsa:4096 <span class="nt">-keyout</span> cakey.key <span class="nt">-out</span> cacert.crt <span class="nt">-config</span> openssl.cnf <span class="nt">-days</span> 3650
</code></pre></div>    </div>

    <p><code class="language-plaintext highlighter-rouge">-x509</code> 是代表使用 X.509 证书结构生成证书，X.509 证书的结构是用 ASN1(Abstract Syntax Notation One)进行描述数据结构。<code class="language-plaintext highlighter-rouge">-days 3650</code>代表证书有效期，按天来算这里是10年。</p>

    <p>这里还要输入密码，用来保护根证书。有密码的话每次使用的时候都要输入密码才能使用。不要密码的话可以使用<code class="language-plaintext highlighter-rouge">-nodes</code>参数。</p>

    <p>X.509 证书编码格式主要有两种： <code class="language-plaintext highlighter-rouge">.PEM</code> 和<code class="language-plaintext highlighter-rouge">.DER</code>。
<code class="language-plaintext highlighter-rouge">.DER</code> 是二进制编码，可包含所有私钥、公钥和证书，是大多数浏览器的缺省格式，常见于 Windows 系统中的证书格式。
<code class="language-plaintext highlighter-rouge">.PEM</code> 是明文格式的, 以 “<code class="language-plaintext highlighter-rouge">-----BEGIN CERTIFICATE-----</code> 开头，以 <code class="language-plaintext highlighter-rouge">-----END CERTIFICATE-----</code> 结尾”, 中间是经过 base64 编码的内容, Apache 和 NGINX 服务器偏向于使用这种编码格式，也是 openssl 默认采用的信息存放方式。<strong>PEM 其实就是把 DER 的内容进行了一次 base64 编码</strong>。</p>

    <p>此处通过命令生成扩展名为<code class="language-plaintext highlighter-rouge">.crt</code>的根证书文件和扩展名为<code class="language-plaintext highlighter-rouge">.key</code> 的公钥，生成的证书和公钥可能是<code class="language-plaintext highlighter-rouge">.PEM</code> 编码格式，也可能是<code class="language-plaintext highlighter-rouge">.DER</code> 编码格式。</p>

    <p>把根证书和公钥保存在<code class="language-plaintext highlighter-rouge">.cer</code>文件中， 再通过 FTP/SFTP 等方式传到本地 Windows 主机文件夹，点击安装根证书并添加到了 windows 的 current User\Trusted Root Certification Authority 目录下,这样由这个根证书签发的证书就会被自动信任。</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>cacert.crt cakey.key <span class="o">&gt;</span> cacert.cer
</code></pre></div>    </div>
  </li>
  <li>
    <p>Linux 查看证书信息，编码，转码：</p>

    <p>查看公钥的内容命令为：<code class="language-plaintext highlighter-rouge">openssl rsa -noout -text -in cakey.key</code>
即可观察秘钥的编码方式，如果为<code class="language-plaintext highlighter-rouge">.PEM</code> ,则会以 base 64 明文方式显示。</p>

    <p>查看证书的内容命令为：<code class="language-plaintext highlighter-rouge">openssl x509 -noout -text -in cacert.crt</code>
证书编码格式转换:</p>

    <ul>
      <li>PEM 转为 DER：<code class="language-plaintext highlighter-rouge">openssl x509 -in cacert.crt -outform der -out cacert.der</code></li>
      <li>DER 转为 PEM：<code class="language-plaintext highlighter-rouge">openssl x509 -in cert.crt -inform der -outform pem -out cacert.pem</code></li>
    </ul>
  </li>
</ol>

<h3 id="windows-导入根证书">windows 导入根证书:</h3>

<p><code class="language-plaintext highlighter-rouge">cmd</code>命令行中输入 <code class="language-plaintext highlighter-rouge">certmgr</code>,找到受信任的根证书颁发机构-证书，右键 -所有任务-导入 然后找到<code class="language-plaintext highlighter-rouge">cacert.crt</code>并导入</p>

<h3 id="使用ca证书签发其他证书">使用CA证书签发其他证书：</h3>

<ol>
  <li>
    <p>创建证书签名请求(证书申请者来做的)</p>

    <p>使用 OpenSSL 创建客户端证书时，请注意：</p>

    <ul>
      <li>创建私钥时，请将长度指定为 <code class="language-plaintext highlighter-rouge">4096</code>。</li>
    </ul>

    <ol>
      <li>
        <p>生成 4096 bit 的客户端私钥</p>

        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openssl genrsa <span class="nt">-out</span> client.key 4096
</code></pre></div>        </div>
      </li>
      <li>
        <p>用该客户端私钥生成证书签名请求，扩展名<code class="language-plaintext highlighter-rouge">.csr</code></p>

        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> openssl req <span class="nt">-new</span> <span class="nt">-key</span> client.key <span class="nt">-out</span> client.csr <span class="nt">-config</span> openssl.cnf
</code></pre></div>        </div>

        <p>如果是申请给网站用的证书的话，需要再加个<code class="language-plaintext highlighter-rouge">extfile</code>：</p>

        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>root@CA ~]# vim http.ext
keyUsage <span class="o">=</span> nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage <span class="o">=</span> serverAuth
<span class="nv">subjectAltName</span><span class="o">=</span>@SubjectAlternativeName
      
<span class="o">[</span> SubjectAlternativeName <span class="o">]</span>
DNS.1<span class="o">=</span><span class="k">*</span>.test.com
IP.1<span class="o">=</span>1.2.3.4
</code></pre></div>        </div>

        <p><code class="language-plaintext highlighter-rouge">extendedKeyUsage</code> 可以指定证书目的，即用途，一般有：
<code class="language-plaintext highlighter-rouge">serverAuth</code>：保证远程计算机的身份
<code class="language-plaintext highlighter-rouge">clientAuth</code>：向远程计算机证明你的身份
<code class="language-plaintext highlighter-rouge">codeSigning</code>：确保软件来自软件发布者，保护软件在发行后不被更改
<code class="language-plaintext highlighter-rouge">emailProtection</code>：保护电子邮件消息
<code class="language-plaintext highlighter-rouge">timeStamping</code>：允许用当前时间签名数据
如果不指定，则默认为 所有应用程序策略</p>

        <p><code class="language-plaintext highlighter-rouge">SubjectAlternativeName</code>内容：</p>

        <p>DNS.1用来确保网站的域名必须时*.test.com，</p>

        <p>IP.1用来确保网站的IP地址，如果证书里面的内容和实际对应不上，浏览器就会报错。</p>
      </li>
      <li>
        <p>将<code class="language-plaintext highlighter-rouge">client.csr</code>和<code class="language-plaintext highlighter-rouge">http.ext</code>这两个文件交给根证书管理员</p>
      </li>
    </ol>
  </li>
  <li>
    <p>根证书管理员签发证书</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl ca <span class="nt">-in</span> client.csr <span class="nt">-out</span> client.crt <span class="nt">-cert</span> cacert.crt <span class="nt">-keyfile</span> cakey.key <span class="nt">-config</span> openssl.cnf <span class="nt">-days</span> 3650 <span class="nt">-extfile</span> http.ext
</code></pre></div>    </div>

    <p>根证书管理员将签署好的证书<code class="language-plaintext highlighter-rouge">client.crt</code>发送给申请者。申请者使用<code class="language-plaintext highlighter-rouge">client.crt</code>以及一开始生成的<code class="language-plaintext highlighter-rouge">client.key</code>就能启用https服务了。</p>

    <p>默认情况下<code class="language-plaintext highlighter-rouge">openssl.cnf</code>的配置是：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>countryName             = match
stateOrProvinceName     = match
organizationName        = match
</code></pre></div>    </div>

    <p>这三个设置的意义就是保证<code class="language-plaintext highlighter-rouge">csr</code>的<code class="language-plaintext highlighter-rouge">countryName,stateOrProvinceName,organizationName</code>,要和根证书一致，不过是可以修改的，只要将match改成<code class="language-plaintext highlighter-rouge">opetional</code>就行</p>
  </li>
</ol>

<h2 id="证书有效性验证">证书有效性验证</h2>

<p>可以利用<code class="language-plaintext highlighter-rouge">openssl</code> 的<code class="language-plaintext highlighter-rouge">s_server</code>命令来模拟一个服务端，要使用到证书管理员生成的证书<code class="language-plaintext highlighter-rouge">client.crt</code>，以及申请人在创建<code class="language-plaintext highlighter-rouge">csr</code>时生成的 <code class="language-plaintext highlighter-rouge">client.key</code></p>

<p>注意：证书如果有 指定ip，要在IP地址为这个地址的主机上运行。</p>

<p><code class="language-plaintext highlighter-rouge">openssl s_server -cert client.crt -key client.key -debug -HTTP -accept 443</code></p>

<p>然后浏览器访问 <code class="language-plaintext highlighter-rouge">https://ip地址</code>来查看证书是否有效（要先导入根证书到信任的根证书颁发机构）。</p>

<h2 id="参考文章">参考文章</h2>

<p><a href="https://docs.azure.cn/zh-cn/articles/azure-operations-guide/application-gateway/aog-application-gateway-howto-create-self-signed-cert-via-openssl#setcion1">如何用 OpenSSL 创建自签名证书</a></p>

<p><a href="https://www.cnblogs.com/will-space/p/11913744.html">OpenSSL自签发自建CA签发SSL证书</a></p>

<p><a href="https://www.zhihu.com/question/58144646">写给小白，关于如何申请CSR（证书验证文件）?</a></p>
:ET