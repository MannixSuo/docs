I" <p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>

<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>

<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>

<p>解法1：</p>

<p>依次将列表中对应的元素相加</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">addTwoNumbers</span><span class="p">(</span><span class="n">l1</span> <span class="o">*</span><span class="n">ListNode</span><span class="p">,</span> <span class="n">l2</span> <span class="o">*</span><span class="n">ListNode</span><span class="p">)</span> <span class="o">*</span><span class="n">ListNode</span> <span class="p">{</span>
    <span class="n">result</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">ListNode</span><span class="p">{}</span>
    <span class="n">current</span> <span class="o">:=</span> <span class="n">result</span>
    <span class="n">over</span><span class="p">,</span> <span class="n">l1value</span><span class="p">,</span> <span class="n">l2value</span> <span class="o">:=</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span>
    <span class="k">for</span> <span class="n">l1</span> <span class="o">!=</span> <span class="no">nil</span> <span class="o">||</span> <span class="n">l2</span> <span class="o">!=</span> <span class="no">nil</span> <span class="o">||</span> <span class="n">over</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">l1</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">l1value</span> <span class="o">=</span> <span class="n">l1</span><span class="o">.</span><span class="n">Val</span>
            <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="o">.</span><span class="n">Next</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="n">l2</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">l2value</span> <span class="o">=</span> <span class="n">l2</span><span class="o">.</span><span class="n">Val</span>
            <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="o">.</span><span class="n">Next</span>
        <span class="p">}</span>
        <span class="n">current</span><span class="o">.</span><span class="n">Val</span> <span class="o">=</span> <span class="p">(</span><span class="n">l1value</span> <span class="o">+</span> <span class="n">l2value</span> <span class="o">+</span> <span class="n">over</span><span class="p">)</span> <span class="o">%</span> <span class="m">10</span>
        <span class="n">over</span> <span class="o">=</span> <span class="p">(</span><span class="n">l1value</span> <span class="o">+</span> <span class="n">l2value</span> <span class="o">+</span> <span class="n">over</span><span class="p">)</span> <span class="o">/</span> <span class="m">10</span>
        <span class="k">if</span> <span class="n">l1</span> <span class="o">!=</span> <span class="no">nil</span> <span class="o">||</span> <span class="n">l2</span> <span class="o">!=</span> <span class="no">nil</span> <span class="o">||</span> <span class="n">over</span> <span class="o">!=</span> <span class="m">0</span> <span class="p">{</span>
            <span class="n">next</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">ListNode</span><span class="p">{}</span>
            <span class="n">current</span><span class="o">.</span><span class="n">Next</span> <span class="o">=</span> <span class="n">next</span>
            <span class="n">current</span> <span class="o">=</span> <span class="n">next</span>
        <span class="p">}</span>
        <span class="n">l1value</span><span class="p">,</span> <span class="n">l2value</span> <span class="o">=</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">result</span>
<span class="p">}</span>
</code></pre></div></div>

<p>解法2：</p>

<p>先算出两个所代表的的值，然后相加，然后再存到列表中</p>

<p>测试未通过：原因：参数太大，转换时会溢出导致结果不正确</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">addTwoNumbers</span><span class="p">(</span><span class="n">l1</span> <span class="o">*</span><span class="n">ListNode</span><span class="p">,</span> <span class="n">l2</span> <span class="o">*</span><span class="n">ListNode</span><span class="p">)</span> <span class="o">*</span><span class="n">ListNode</span> <span class="p">{</span>
    <span class="n">result</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">ListNode</span><span class="p">{}</span>
    <span class="n">current</span> <span class="o">:=</span> <span class="n">result</span>
    <span class="n">l1val</span> <span class="o">:=</span> <span class="n">getActualNumber</span><span class="p">(</span><span class="n">l1</span><span class="p">)</span>
    <span class="n">l2val</span> <span class="o">:=</span> <span class="n">getActualNumber</span><span class="p">(</span><span class="n">l2</span><span class="p">)</span>
    <span class="n">total</span> <span class="o">:=</span> <span class="n">l1val</span> <span class="o">+</span> <span class="n">l2val</span>
    <span class="k">for</span> <span class="n">total</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
        <span class="n">current</span><span class="o">.</span><span class="n">Val</span> <span class="o">=</span> <span class="n">total</span> <span class="o">%</span> <span class="m">10</span>
        <span class="n">total</span> <span class="o">=</span> <span class="n">total</span> <span class="o">/</span> <span class="m">10</span>
        <span class="k">if</span> <span class="n">total</span> <span class="o">&gt;</span> <span class="m">0</span> <span class="p">{</span>
            <span class="n">next</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="n">ListNode</span><span class="p">{}</span>
            <span class="n">current</span><span class="o">.</span><span class="n">Next</span> <span class="o">=</span> <span class="n">next</span>
            <span class="n">current</span> <span class="o">=</span> <span class="n">next</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">result</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">getActualNumber</span><span class="p">(</span><span class="n">l</span> <span class="o">*</span><span class="n">ListNode</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="n">pow</span> <span class="o">:=</span> <span class="m">1</span>
    <span class="n">lvalue</span> <span class="o">:=</span> <span class="m">0</span>
    <span class="k">for</span> <span class="n">l</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">lvalue</span> <span class="o">+=</span> <span class="n">l</span><span class="o">.</span><span class="n">Val</span> <span class="o">*</span> <span class="n">pow</span>
        <span class="n">pow</span> <span class="o">=</span> <span class="n">pow</span> <span class="o">*</span> <span class="m">10</span>
        <span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">Next</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">lvalue</span>
<span class="p">}</span>

</code></pre></div></div>
:ET