I"b#<p>给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>

<p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>

<p>解法1：
三个动点：i j k.
i是要扫描的点,j是数组前面不重复元素的坐标,k是判断0-j中的元素是否和i相等。没有相等的，
j++,i++再判断一轮
<code class="language-plaintext highlighter-rouge">___k__j_i_____</code></p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">func</span> <span class="n">removeDuplicates</span><span class="p">(</span><span class="n">nums</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="n">j</span> <span class="o">:=</span> <span class="m">1</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="n">j</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">k</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">{</span>
                <span class="k">break</span>
            <span class="p">}</span>
            <span class="c">// 如果到最后还没有相等,说明不是重复元素</span>
            <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="n">j</span><span class="o">-</span><span class="m">1</span> <span class="p">{</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="n">j</span><span class="o">++</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">j</span>
<span class="p">}</span>

</code></pre></div></div>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">removeDuplicates</span><span class="p">(</span><span class="n">nums</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="n">j</span> <span class="o">:=</span> <span class="m">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">if</span> <span class="o">!</span><span class="n">contains</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">j</span><span class="o">++</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">j</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">contains</span><span class="p">(</span><span class="n">nums</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="n">length</span> <span class="kt">int</span><span class="p">,</span> <span class="n">number</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">number</span> <span class="p">{</span>
            <span class="k">return</span> <span class="no">true</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="no">false</span>
<span class="p">}</span>
</code></pre></div></div>

<p>解法2：</p>

<p>解法一的改进版：</p>

<p>四个动点 nextIndex是要扫描并判断是否重复的点
currentIndex是数组前面不重复元素的个数</p>

<p>start end</p>

<p><code class="language-plaintext highlighter-rouge">0_____start&gt;_____&lt;end_____currentIndex&gt;__nextIndex&gt;___len</code>中的坐标<code class="language-plaintext highlighter-rouge">&lt;&gt;代表移动方向</code>,应该比解法一快</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">func</span> <span class="n">removeDuplicates</span><span class="p">(</span><span class="n">nums</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="n">nextIndex</span> <span class="o">:=</span> <span class="m">0</span>
    <span class="n">currentIndex</span> <span class="o">:=</span> <span class="m">0</span>
    <span class="n">start</span> <span class="o">:=</span> <span class="m">0</span>
    <span class="n">end</span> <span class="o">:=</span> <span class="m">0</span>
    <span class="k">for</span> <span class="n">nextIndex</span> <span class="o">=</span> <span class="n">currentIndex</span><span class="p">;</span> <span class="n">nextIndex</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">);</span> <span class="n">nextIndex</span><span class="o">++</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">start</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">start</span> <span class="o">&lt;=</span> <span class="n">currentIndex</span><span class="p">;</span> <span class="n">start</span><span class="o">++</span> <span class="p">{</span>
            <span class="n">end</span> <span class="o">=</span> <span class="n">currentIndex</span> <span class="o">-</span> <span class="n">start</span> <span class="o">-</span> <span class="m">1</span>
            <span class="k">if</span> <span class="n">start</span> <span class="o">&gt;</span> <span class="n">end</span> <span class="p">{</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">currentIndex</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">nextIndex</span><span class="p">]</span>
                <span class="n">currentIndex</span><span class="o">++</span>
                <span class="k">break</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">end</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">nextIndex</span><span class="p">]</span> <span class="o">||</span> <span class="n">nums</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">nextIndex</span><span class="p">]</span> <span class="p">{</span>
                <span class="k">break</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">currentIndex</span>
<span class="p">}</span>
</code></pre></div></div>
:ET