I"å<p>A methed can use interface as itâ€™s parameter type, and we can use a struct (or pointer to this struct) which implemnents this interface as parameter.</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">I</span> <span class="k">interface</span> <span class="p">{</span>
    <span class="n">a</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">S</span> <span class="k">struct</span> <span class="p">{</span>
<span class="p">}</span>
<span class="c">//not *S</span>
<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="n">S</span><span class="p">)</span> <span class="n">a</span><span class="p">()</span> <span class="p">{}</span>

<span class="k">func</span> <span class="n">test1</span><span class="p">(</span><span class="n">b</span> <span class="n">I</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">test2</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">S</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">test1</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">test3</span><span class="p">(</span><span class="n">c</span> <span class="n">S</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">test1</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Struct <code class="language-plaintext highlighter-rouge">S</code> implements interface <code class="language-plaintext highlighter-rouge">I</code>, method <code class="language-plaintext highlighter-rouge">test1</code>â€™s parameter is interface <code class="language-plaintext highlighter-rouge">I</code>,we can use <code class="language-plaintext highlighter-rouge">*S</code> and <code class="language-plaintext highlighter-rouge">S</code> as interface <code class="language-plaintext highlighter-rouge">I</code> ,shown in method <code class="language-plaintext highlighter-rouge">test2</code> and <code class="language-plaintext highlighter-rouge">test3</code></p>

<p>If we modify the code a litte</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">I</span> <span class="k">interface</span> <span class="p">{</span>
    <span class="n">a</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">type</span> <span class="n">S</span> <span class="k">struct</span> <span class="p">{</span>
<span class="p">}</span>
<span class="c">//not S, we modified it</span>
<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">S</span><span class="p">)</span> <span class="n">a</span><span class="p">()</span> <span class="p">{}</span>

<span class="k">func</span> <span class="n">test1</span><span class="p">(</span><span class="n">b</span> <span class="n">I</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">test2</span><span class="p">(</span><span class="n">c</span> <span class="o">*</span><span class="n">S</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">test1</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="p">}</span>
<span class="c">//error</span>
<span class="k">func</span> <span class="n">test3</span><span class="p">(</span><span class="n">c</span> <span class="n">S</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">test1</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If we modify the method receiver to <code class="language-plaintext highlighter-rouge">*S</code>,then <code class="language-plaintext highlighter-rouge">test3</code> wonâ€™t compile,<code class="language-plaintext highlighter-rouge">S</code> now is not interface <code class="language-plaintext highlighter-rouge">I</code>.</p>

<p>why?</p>

<p><a href="https://golang.org/ref/spec#Method_sets">Method Sets</a></p>

<p>we already known that all method is equals to functions but use method receiver as itâ€™s first argument.</p>

<p>in golang a struct <code class="language-plaintext highlighter-rouge">T</code> and itâ€™s pointer <code class="language-plaintext highlighter-rouge">*T</code> and it has some methods. if the method receiver is <code class="language-plaintext highlighter-rouge">T</code> such as</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">t</span> <span class="n">T</span><span class="p">)</span> <span class="n">anyMethod</span><span class="p">(){}</span>
</code></pre></div></div>

<p>then we can call <code class="language-plaintext highlighter-rouge">anyMethod()</code> on both <code class="language-plaintext highlighter-rouge">T</code> and <code class="language-plaintext highlighter-rouge">*T</code>. because <code class="language-plaintext highlighter-rouge">*T</code> has all methods that <code class="language-plaintext highlighter-rouge">T</code> has.</p>

<p>but if the method receiver is <code class="language-plaintext highlighter-rouge">*T</code>
such as</p>

<div class="language-golang highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="p">(</span><span class="n">t</span> <span class="o">*</span><span class="n">T</span><span class="p">)</span> <span class="n">anyMethod</span><span class="p">(){}</span>
</code></pre></div></div>

<p>then the method <code class="language-plaintext highlighter-rouge">anyMethod()</code> only receive <code class="language-plaintext highlighter-rouge">*T</code> , so <code class="language-plaintext highlighter-rouge">T</code> doesnâ€™t implements interface <code class="language-plaintext highlighter-rouge">I</code> then <code class="language-plaintext highlighter-rouge">test3</code> wonâ€™t compile.</p>
:ET